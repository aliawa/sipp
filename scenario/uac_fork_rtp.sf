<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE scenario SYSTEM "sipp.dtd">


<!-- A SIP UAC that uses database file to populate the from and to user. The data
     file should be in this format:
     
     SEQUENTIAL
     <from-user>;<to-user>
-->


<scenario name="Basic Sipstone UAC">
  <!-- In client mode (sipp placing calls), the Call-ID MUST be         -->
  <!-- generated by sipp. To do so, use [call_id] keyword.                -->
  <send retrans="500">
    <![CDATA[

      INVITE sip:[field1]@[remote_ip]:[remote_port] SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: [field0] <sip:[field0]@[local_ip]:[local_port]>;tag=[pid]SIPpTag00[call_number]
      To:  <sip:[field1]@[remote_ip]:[remote_port]>
      Call-ID: [call_id]
      CSeq: 1 INVITE
      Contact: sip:[field0]@[local_ip]:[local_port]
      Max-Forwards: 70
      Supported: 100rel
      Subject: sipp-fork_rtp.sf
      Content-Type: application/sdp
      Content-Length: [len]

      v=0
      o=user1 53655765 2353687637 IN IP[local_ip_type] [local_ip]
      s=-
      c=IN IP[media_ip_type] [media_ip]
      t=0 0
      m=audio [media_port] RTP/AVP 0
      a=rtpmap:0 PCMU/8000
      x-my=0

    ]]>
  </send>

  <recv response="100"
        optional="true">
  </recv>

  <!-- Receive response from first forked destination -->
  <recv response="180">
  </recv>


  <!-- Play DTMF Tone 1 -->
  <nop>
    <action>
      <exec play_pcap_audio="pcap/dtmf_2833_1.pcap"/>
    </action>
  </nop>

  <!-- Receive response from second forked destination -->
  <recv response="183" >
    <action>
      <ereg regexp="([0-9]+)" search_in="hdr" header="RSeq:" assign_to="rseq" />
      <ereg regexp="([0-9]+)" search_in="hdr" header="CSeq:" assign_to="cseq" />
    </action>
  </recv>

  <!-- Play DTMF Tone 2 -->
  <nop>
    <action>
      <exec play_pcap_audio="pcap/dtmf_2833_2.pcap"/>
    </action>
  </nop>

  <send>
    <![CDATA[
      PRACK sip:[field1]@[remote_ip]:[remote_port] SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: sipp <sip:[field0]@[local_ip]:[local_port]>;tag=[pid]SIPpTag00[call_number]
      To: sut <sip:[field1]@[remote_ip]:[remote_port]>[peer_tag_param]
      Call-ID: [call_id]
      CSeq: 2 PRACK
      RAck: [$rseq] [$cseq] INVITE
      Contact: sip:[field0]@[local_ip]:[local_port]
      User-Agent: sipp-UAC
      Subject: uac_fork_rtp.sf
      Max-Forwards: 70
      Content-Length: 0
    ]]>
  </send>

  <!-- receive 200 OK to PRACK --> 
  <recv response="200">
  </recv>

  <!-- receive 200 OK to INVITE --> 
  <recv response="200" rtd="true">
  </recv>


  <send>
    <![CDATA[

      ACK sip:[field1]@[remote_ip]:[remote_port] SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: sipp <sip:[field0]@[local_ip]:[local_port]>;tag=[pid]SIPpTag00[call_number]
      To: sut <sip:[field1]@[remote_ip]:[remote_port]>[peer_tag_param]
      Call-ID: [call_id]
      CSeq: 1 ACK
      Contact: sip:[field0]@[local_ip]:[local_port]
      Max-Forwards: 70
      Subject: Performance Test
      Content-Length: 0

    ]]>
  </send>


  <!-- Play DTMF tone 3 -->
  <nop>
    <action>
      <exec play_pcap_audio="pcap/dtmf_2833_3.pcap"/>
    </action>
  </nop>

  <!-- Pause 2 seconds (playing media) -->
  <pause milliseconds="200"/>

  <!-- This delay can be customized by the -d command-line option       -->
  <!-- or by adding a 'milliseconds = "value"' option here.             -->
  <pause/>


</scenario>

